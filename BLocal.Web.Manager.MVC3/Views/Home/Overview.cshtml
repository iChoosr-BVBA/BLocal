@using BLocal.Core
@using System.Configuration
@using BLocal.Web.Manager.Configuration
@using BLocal.Web.Manager.Controllers
@using BLocal.Web.Manager.Models.AutomaticSynchronization
@{
    ViewBag.Title = "Localization Manager";
}
@section Head {
    <meta name="google-signin-client_id" content="@ConfigurationManager.AppSettings["GoogleOAuthCliendId"]">
    <script type="text/javascript">
    </script>
}

<h1>Localization Manager - <span class="accent">@Session["Author"]</span></h1>

@if (ConfigurationManager.AppSettings["GoogleLogInEnabled"] == "true")
{
    <script type="text/javascript">
        function googleLogOut() {
            gapi.auth2.getAuthInstance().disconnect();
            $.ajax({
                url: '@Url.Action("EndSession", "Home")',
                type: 'POST',
                dataType: 'text',
                cache: false,
                success: function (data) { location.href = "/Home/index"; }
            });
        };
        function onLoad() {
            gapi.load('auth2', function () {
                gapi.auth2.init();
            });
        }
    </script>
    <script src="https://apis.google.com/js/platform.js?onload=onLoad" async defer></script>
    <button onclick="googleLogOut()">Log out</button>  
}

<section class="general">
    <h2>Manual editing</h2>
    @using (Html.BeginForm("Index", "DirectEditing", FormMethod.Get))
    {
        <p>
            <select name="providerConfigName">
                @foreach (var config in ProviderConfig.ProviderGroups)
                {
                    <option>@config.Name</option>
                }
            </select>
            <button type="submit">Edit</button>
        </p>
    }
</section>

<section class="general">
    <h2>View history</h2>
    @using (Html.BeginForm("Index", "History", FormMethod.Get))
    {
        <p>
            <select name="providerConfigName">
                @foreach (var config in ProviderConfig.ProviderGroups)
                {
                    <option>@config.Name</option>
                }
            </select>
            <button type="submit">View</button>
        </p>
    }
</section>
    
<section class="general left">
    <h2>Manual Synchronization</h2>
    @using (Html.BeginForm("Index", "ManualSynchronization", FormMethod.Get))
    {
        <p>
            between
            <select name="leftConfigName">
                @foreach (var config in ProviderConfig.ProviderGroups)
                {
                    <option>@config.Name</option>
                }
            </select>
            and
            <select name="rightConfigName">
                @foreach (var config in ProviderConfig.ProviderGroups)
                {
                    <option>@config.Name</option>
                }
            </select>
            <button type="submit">Start</button>
        </p>
    }
</section>
<section class="general">
    <h2>Import / Export</h2>
    @using (Html.BeginForm("Index", "ImportExport", FormMethod.Get))
    {
        <select name="providerConfigName">
            @foreach (var config in ProviderConfig.ProviderGroups)
            {
                <option>@config.Name</option>
            }
        </select>
        <button type="submit">Start</button>
    }
</section>
<section class="general">
    <h2>Verify translations across locales</h2>
    @using (Html.BeginForm("Index", "TranslationVerification", FormMethod.Get))
    {
        <select name="providerConfigName">
            @foreach (var config in ProviderConfig.ProviderGroups)
            {
                <option>@config.Name</option>
            }
        </select>
        <button type="submit">Start</button>
    }
</section>
<section class="general left">
    <h2>Automatic Synchronization</h2>
    @using (Html.BeginForm("Index", "AutomaticSynchronization", FormMethod.Get, new { target="_blank" }))
    {
        <p>
            between
            <select name="LeftProviderGroupName">
                @foreach (var config in ProviderConfig.ProviderGroups)
                {
                    <option>@config.Name</option>
                }
            </select>
            and
            <select name="RightProviderGroupName">
                @foreach (var config in ProviderConfig.ProviderGroups)
                {
                    <option>@config.Name</option>
                }
            </select>
        </p>
        <p>
            When a value is added on the right, resolve using
            <select name="LeftMissingStrategy">
                @foreach (var missingStrategyName in Enum.GetNames(typeof(SynchronizationSettings.MissingResolutionStrategy)))
                {
                    <option>@missingStrategyName</option>
                }
            </select>
        </p>
        <p>
            When a value is added on the left, resolve using
            <select name="RightMissingStrategy">
                @foreach (var missingStrategyName in Enum.GetNames(typeof(SynchronizationSettings.MissingResolutionStrategy)))
                {
                    <option>@missingStrategyName</option>
                }
            </select>
        </p>
        <p>
            When the two environments have different values, resolve using
            <select name="DifferingStrategy">
                @foreach (var differingStrategyName in Enum.GetNames(typeof(SynchronizationSettings.DifferingResolutionStrategy)))
                {
                    <option>@differingStrategyName</option>
                }
            </select>
        </p>
        <p>
            <select name="Execute">
                <option value="false">Just show output</option>
                <option value="true">Execute for real</option>
            </select>
            <button type="submit">Start</button>
        </p>
    }
</section>
<section class="general left">
    Localization Manager Version: @System.Reflection.Assembly.GetAssembly(typeof(HomeController)).GetName().Version
</section>